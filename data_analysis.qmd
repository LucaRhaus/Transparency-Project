---
title: "Transparency Register Analysis"
format: html
editor: visual
---

# Load Packages

```{r}
library(openxlsx)
library(tidyverse)
library(svglite)
library(paletteer)
library(stringr)
library(ggplot2)
library(ggrepel)
library(ggpubr)


```

# Import Data

```{r}

meetings_data <- read_csv(file = paste0(getwd(), "/final_data/final_meetings_data.csv"))

# # fix weird encoding bug
# meetings_data$`Category Detailed` <- replace(meetings_data$`Category Detailed`,
#                                            meetings_data$`Category Detailed` == 
#                                              "Fabless (Chip Design &amp; IP Holders)", 
#                                            "Fabless (Chip Design & IP Holders)")

if (file.exists(paste0(getwd(), "/Graphics/")) == F){
    dir.create(file.path(getwd(), "/Graphics/"))
}

if (file.exists(paste0(getwd(), "/tables/")) == F){
    dir.create(file.path(getwd(), "/tables/"))
}

```

## Export Settings

```{r}
std_width = 7.5
std_height = 4.5
```

# Analysis

## Number of distinct interest groups

```{r}
num_distinct_groups <- length(unique(meetings_data$`Interest Group Name`))
print(num_distinct_groups)
```

## Origin Region of interest groups (not distinct)

```{r}
origincountry_df <- (meetings_data %>% select(`Interest Group Name`, Region)) %>% group_by(Region) %>% summarize(count_of_groups = n()) 

df <- sort_by.data.frame(origincountry_df, -origincountry_df$count_of_groups)


# Get the positions
df2 <- df %>% 
  mutate(csum = rev(cumsum(rev(count_of_groups))), 
         pos = count_of_groups/2 + lead(csum, 1),
         pos = if_else(is.na(pos), count_of_groups/2, pos))

regions_piechart <- ggplot(df, aes(x = "" , y = count_of_groups, fill = fct_inorder(`Region`))) +
  geom_col(width = 1, color = "#3d3d3d") +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "Pastel1") +
  geom_label_repel(data = df2,
                   aes(y = pos, label = paste0(count_of_groups, " (", round(count_of_groups/sum(count_of_groups)*100, 0), "%)")),
                   size = 2.5, nudge_x = 1, show.legend = FALSE) +
  theme_void() +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.position = "top",
    legend.title = element_blank(),
    #legend.key.size = unit(0.5, "cm"),  # Einheitliche Symbolgröße
    legend.key.width = unit(0.5, "cm"),
    legend.key.height = unit(0.4, "cm")
  ) +
  guides(
    fill = guide_legend(
      nrow = 6,
      byrow = TRUE,
      override.aes = list(size = 5)     # Einheitliche Größe der Legenden-Blöcke
    )
  )
  
regions_piechart <- annotate_figure(regions_piechart, top = text_grob("Global Distribution\n", 
                                                                      color = "#3d3d3d", face = "bold", size = 14))
regions_piechart
```

## Origin Country of interest groups *in Europe* (not distinct)

```{r}
origincountry_df <- (meetings_data %>% filter(Region %in% c("EUROPE", "EUROPE (NON-EU)")) %>% select(`Interest Group Name`, `Head Office`)) %>% group_by(`Head Office`) %>% summarize(count_of_groups = n())

df <- sort_by.data.frame(origincountry_df, -origincountry_df$count_of_groups)


# Get the positions
df2 <- df %>% 
  mutate(csum = rev(cumsum(rev(count_of_groups))), 
         pos = count_of_groups/2 + lead(csum, 1),
         pos = if_else(is.na(pos), count_of_groups/2, pos))

countries_eu_piechart <- ggplot(df, aes(x = "" , y = count_of_groups, fill = fct_inorder(`Head Office`))) +
  geom_col(width = 1, color = "#3d3d3d") +
  coord_polar(theta = "y") +
  scale_fill_paletteer_d("rcartocolor::Pastel") +
  geom_label_repel(data = df2,
                   aes(y = pos, label = paste0(count_of_groups, " (", round(count_of_groups/sum(count_of_groups)*100, 0), "%)")),
                   size = 2.5, nudge_x = 1, show.legend = FALSE) +
  theme_void() +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.position = "top",
    legend.title = element_blank(),
    #legend.key.size = unit(0.5, "cm"),  # Einheitliche Symbolgröße
    legend.key.width = unit(0.5, "cm"),
    legend.key.height = unit(0.4, "cm")
  ) +
  guides(
    fill = guide_legend(
      nrow = 6,
      byrow = TRUE,
      override.aes = list(size = 5)     # Einheitliche Größe der Legenden-Blöcke
    )
  )
  
countries_eu_piechart <- annotate_figure(countries_eu_piechart, top = text_grob("Distribution in Europe\n", 
                                                                      color = "#3d3d3d", face = "bold", size = 14))
countries_eu_piechart
```

## Combine Region and Country Plots

```{r}

regions_combined <- ggarrange(regions_piechart, countries_eu_piechart,
                    labels = c("", ""),
                    
                    ncol = 2, nrow = 1)

# regions_combined <- annotate_figure(regions_combined, top = text_grob("Distribution across Regions an in Europe", 
#                                                                       color = "#3d3d3d", face = "bold", size = 14))

ggsave(filename = "regions and countries piecharts combined.svg", path = "./Graphics/", width = std_width, height = std_height)
regions_combined
```

## Distribution of interest groups across broad categories (unique, probably not interesting)

```{r}
#| eval: false
#| include: false

# distribution_broad <- unique(meetings_data %>% select(`Interest Group Name`, `Category Broad`)) %>% group_by(`Category Broad`) %>% summarize(count_of_groups = n()) 
# 
# data <- distribution_broad %>% arrange(desc(`Category Broad`)) %>%
#   mutate(prop = count_of_groups / sum(data$count_of_groups) *100) %>%
#   mutate(ypos = cumsum(prop)- 0.5*prop )
# 
# ggplot(data, aes(x="", y=prop, fill=`Category Broad`)) +
#   geom_bar(stat="identity", width=1, color="white") +
#   coord_polar("y", start=0) + 
#   scale_fill_paletteer_d("PrettyCols::Bold") +
#   theme_void() +
#   geom_text(aes(y = ypos, label = count_of_groups), color = "white", size=4)
# 
# ggsave(filename = "distribution distinct groups broad categories.svg", path = "./Graphics/")
```

## Distribution of interest groups across detailed categories (probably not interesting):

```{r}

# distribution_detailed <- unique(meetings_data %>% select(`Interest Group Name`, `Category Detailed`)) %>% group_by(`Category Detailed`) %>% summarize(count_of_groups = n()) 
# 
# data <- distribution_detailed %>% arrange(desc(`Category Detailed`)) %>%
#   mutate(prop = count_of_groups / sum(data$count_of_groups) *100) %>%
#   mutate(ypos = cumsum(prop)- 0.5*prop )
# 
# ggplot(data, aes(x="", y=prop, fill=`Category Detailed`)) +
#   geom_bar(stat="identity", width=1, color="white") +
#   coord_polar("y", start=0) + 
#   scale_fill_paletteer_d("MetBrewer::Cross") +
#   theme_void() +
#   geom_text(aes(y = ypos, label = count_of_groups), color = "white", size=4)
# 
# ggsave(filename = "distribution distinct groups detailed categories.svg", path = "./Graphics/")
```

## Distribution of meetings by broad category of interest group

```{r}

distribution_broad <- meetings_data %>% select(`Interest Group Name`, `Category Broad`) %>% group_by(`Category Broad`) %>% summarize(count_of_groups = n()) 

# Get the positions
df2 <- distribution_broad %>% 
  mutate(csum = rev(cumsum(rev(count_of_groups))), 
         pos = count_of_groups/2 + lead(csum, 1),
         pos = if_else(is.na(pos), count_of_groups/2, pos))


distr_broad <- ggplot(distribution_broad, aes(x="", y=count_of_groups, fill = fct_inorder(`Category Broad`))) +
  geom_col(width=1, color="#3d3d3d") +
  coord_polar(theta = "y") + 
  scale_fill_brewer(palette = "Pastel1") +
  geom_label_repel(data = df2,
                   aes(y = pos, label = paste0(count_of_groups, " (", round(count_of_groups/sum(count_of_groups)*100, 0), "%)")),
                   size = 2.5, nudge_x = 1, show.legend = FALSE) +

  theme_void() +
  # geom_text(aes(y = ypos, label = count_of_groups), color = "white", size=4) + 
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.position = "top",
    legend.title = element_blank(),
    #legend.key.size = unit(0.5, "cm"),  # Einheitliche Symbolgröße
    legend.key.width = unit(0.5, "cm"),
    legend.key.height = unit(0.4, "cm")
  ) +
  guides(
    fill = guide_legend(
      nrow = 5,
      byrow = TRUE,
      override.aes = list(size = 5)     # Einheitliche Größe der Legenden-Blöcke
    )
  )

distr_broad <- annotate_figure(distr_broad, top = text_grob("Broad Categories", color = "#3d3d3d", face = "bold", size = 14))
distr_broad
```

## Distribution of meetings by detailed category of interest group

```{r}

distribution_detailed <- meetings_data %>% filter(`Category Broad` == "Semiconductor Industry") %>% select(`Interest Group Name`, `Category Detailed`) %>% group_by(`Category Detailed`) %>% summarize(count_of_groups = n()) 

# Get the positions
df2 <- distribution_detailed %>% 
  mutate(csum = rev(cumsum(rev(count_of_groups))), 
         pos = count_of_groups/2 + lead(csum, 1),
         pos = if_else(is.na(pos), count_of_groups/2, pos))

distr_detail <- ggplot(distribution_detailed, aes(x="", y=count_of_groups, fill = fct_inorder(`Category Detailed`))) +
  geom_col(width=1, color="#3d3d3d") +
  coord_polar(theta = "y") + 
  scale_fill_paletteer_d("rcartocolor::Pastel") +
  geom_label_repel(data = df2,
                   aes(y = pos, label = paste0(count_of_groups, " (", round(count_of_groups/sum(count_of_groups)*100, 0), "%)")),
                   size = 2.5, nudge_x = 1, show.legend = FALSE) +

  theme_void() +
  # geom_text(aes(y = ypos, label = count_of_groups), color = "white", size=4) + 
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.position = "top",
    legend.title = element_blank(),
    #legend.key.size = unit(0.5, "cm"),  # Einheitliche Symbolgröße
    legend.key.width = unit(0.5, "cm"),
    legend.key.height = unit(0.4, "cm")
  ) +
  guides(
    fill = guide_legend(
      nrow = 5,
      byrow = TRUE,
      override.aes = list(size = 5)     # Einheitliche Größe der Legenden-Blöcke
    )
  )
distr_detail <- annotate_figure(distr_detail, top = text_grob("Detailed Semiconductor Categories", color = "#3d3d3d", face = "bold", size = 14))
distr_detail
```

```{r}
distr_combined <- ggarrange(distr_broad, distr_detail, ncol = 2, nrow = 1)

# distr_combined <- annotate_figure(distr_combined, top = text_grob(paste0("Broad Categories","","Detailed Semiconductor Categories"), 
#                                                                       color = "#3d3d3d", face = "bold", size = 14))

ggsave(filename = "category distribution piecharts combined.svg", plot = distr_combined, path = "./Graphics/", width = std_width, height = std_height)
distr_combined
```

## Table of meetings per interest group

```{r}
meetings_per_group <- meetings_data %>% group_by(`Interest Group Name`) %>% summarise(`num of meetings` = n())
meetings_per_group <- unique(left_join(x = meetings_per_group, 
                                       y = meetings_data %>% select(`Interest Group Name`, 
                                         `Category Broad`, 
                                         `Category Detailed`), 
                                       by = "Interest Group Name") ) %>% relocate(`num of meetings`, .after = `Category Detailed`) %>% sort_by(y = -meetings_per_group$`num of meetings`)

openxlsx::write.xlsx(meetings_per_group, "./tables/meetings_per_group.xlsx")
```

## Distribution (and Table) of Meetings with high-ranking EC members such as (Vice) President, Commissioner

```{r}


meetings_data$`High Ranked` <- ifelse(
  str_detect(meetings_data$`Title of EC representative`, "Commissioner") | 
    str_detect(meetings_data$`Title of EC representative`, "President"), 
  "(Vice-) President,\n Commissioner", 
  "EC Cabinet member,\n Director General")
  
data <- meetings_data %>% select(`Interest Group Name`, `High Ranked`, `Category Broad`) %>% group_by(`High Ranked`, `Category Broad`) %>% summarise(`Number of Meetings` = n())

print(data)

# Absolute Numbers
high.rank_abs <- ggplot(data, aes(fill=`Category Broad`, y=`Number of Meetings`, x=`High Ranked`)) + 
      geom_bar(position="dodge", stat="identity") +
      ylim(0, 75) +
      scale_fill_paletteer_d("PrettyCols::Bold") + 
      geom_text(
        aes(label = `Number of Meetings`),
        position = position_dodge(width = 0.9),  # Damit die Zahlen über den Balken bleiben
        vjust = -0.3,  # Leicht über den Balken platzieren
        size = 3                               
      ) +
      theme_light() +
      guides(fill="none") +
      theme(
       axis.title.x = element_blank(),
      )


# Relative
high.rank_rel <- ggplot(data, aes(fill=`Category Broad`, y=`Number of Meetings`, x=`High Ranked`)) +
    geom_bar(position="fill", stat="identity") +
    scale_fill_paletteer_d("PrettyCols::Bold") +
    theme_light() +
    theme(
       axis.title.x = element_blank(),
       axis.title.y = element_blank(),
       legend.position = "bottom",
       legend.title = element_blank()
    ) + 
  guides(
    fill = guide_legend(
      nrow = 2,
      byrow = T,
      override.aes = list(size = 5)     # Einheitliche Größe der Legenden-Blöcke
    )
  )

high.rank_combined <- ggarrange(high.rank_abs, high.rank_rel, ncol = 2, nrow = 1, common.legend = T, legend = "bottom")

ggsave(filename = "high vs low ranking combined.svg", path = "./Graphics/", width = std_width, height = std_height)
high.rank_combined
```

## Who are the Commissioners that interest groups have their meetings with?

```{r}
interesting_individuals <- c("Margrethe Vestager", "Thierry Breton", 
                             "Ursula von der Leyen", "Johannes Hahn", 
                             "Valdis Dombrovskis", "Nicolas Schmit")

commissioner_data <- meetings_data %>% filter(`High Ranked` == "(Vice-) President,\n Commissioner")

commissioner_data$`Commissioner Name` <- ifelse(str_detect(commissioner_data$`Name of EC representative`, interesting_individuals[1]), yes = interesting_individuals[1], no =
                                              ifelse(str_detect(commissioner_data$`Name of EC representative`, interesting_individuals[2]), yes = interesting_individuals[2], no = ifelse(str_detect(commissioner_data$`Name of EC representative`, interesting_individuals[3]), yes = "Ursula von\nder Leyen", no = ifelse(str_detect(commissioner_data$`Name of EC representative`, interesting_individuals[4]), yes = interesting_individuals[4], no = ifelse(str_detect(commissioner_data$`Name of EC representative`, interesting_individuals[5]), yes = interesting_individuals[5], no = ifelse(str_detect(commissioner_data$`Name of EC representative`, interesting_individuals[6]), yes = interesting_individuals[6], no = "ERROR"))))))

summarised_df <- commissioner_data %>%
  group_by(`Commissioner Name`, `Category Detailed`) %>%
  summarise(`Number of Meetings` = n(), .groups = "drop")

# Sicherstellen, dass alle Kombinationen existieren, fehlende Werte mit 0 ersetzen
commissioner_data_summarised_categorized <- summarised_df %>%
  complete(`Commissioner Name`, `Category Detailed`, fill = list(`Number of Meetings` = 0))


ggplot(commissioner_data_summarised_categorized, aes(fill=`Category Detailed`, y=`Number of Meetings`, x=`Commissioner Name`)) +
  geom_bar(position="dodge", stat="identity") +
  ylim(0, 26) +
  scale_fill_paletteer_d("ggthemes::Classic_10") + 
  theme_light() +
  geom_text(
        aes(label = ifelse(`Number of Meetings` > 0, `Number of Meetings`,"")),
        position = position_dodge(width = 0.9),  # Damit die Zahlen über den Balken bleiben
        vjust = -0.3,  # Leicht über den Balken platzieren
        size = 3                               
      ) +
  theme(legend.position = "bottom",     
        legend.title = element_blank(),
        axis.title.x = element_blank()) + 
   guides(
    fill = guide_legend(
      ncol = 2,
      byrow = TRUE,
      override.aes = list(size = 5)     # Einheitliche Größe der Legenden-Blöcke
    )
  ) 

ggsave(filename = "barchart commissioner frequencys.svg", path = "./Graphics/", width = std_width, height = 6)
```

## Most frequent interest groups

```{r}
interestgroups_frequency <- meetings_data %>% group_by(`Interest Group Name`) %>% summarise(`Number of Meetings` = n())
interestgroups_frequency <- interestgroups_frequency[order(interestgroups_frequency$`Number of Meetings`, decreasing = TRUE), ]  

# X-Labels umbrechen
interestgroups_frequency_df <- interestgroups_frequency
interestgroups_frequency_df$`Interest Group Name` <- stringr::str_wrap(interestgroups_frequency$`Interest Group Name`, width = 50)

ggplot(interestgroups_frequency_df[1:10, ], aes(fill = `Interest Group Name`, x = `Interest Group Name`, y = `Number of Meetings`)) +
  geom_bar(position = "dodge", stat = "identity") +
  ylim(0, 22) +
  geom_text(
    aes(label = `Number of Meetings`),   
    vjust = -0.3,                     
    size = 3                          
  ) +
  scale_fill_paletteer_d("ggthemes::Classic_10") +
  theme_light() +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.position = "top",
    legend.title = element_blank(),
    #legend.key.size = unit(0.5, "cm"),  # Einheitliche Symbolgröße
    legend.key.width = unit(0.5, "cm"),
    legend.key.height = unit(0.4, "cm")
  ) +
  guides(
    fill = guide_legend(
      nrow = 5,
      byrow = TRUE,
      override.aes = list(size = 5)     # Einheitliche Größe der Legenden-Blöcke
    )
  ) +
  coord_cartesian(clip = 'off')

ggsave(filename = "barchart frequency interestgroups.svg", path = "./Graphics/")
openxlsx::write.xlsx(distinct(merge(x = interestgroups_frequency, 
                               y = meetings_data[ ,c("Region", "Head Office", "Interest Group Name")],
                               by = "Interest Group Name", all.x = T)) , 
                     file = "./tables/interestgroups_frequency.xlsx")
```

## Timeline of meetings

```{r}
library(hrbrthemes)
library(ggthemes)

timeseries_data <- meetings_data

# Datum auf den ersten Tag des Monats setzen
timeseries_data$`Date of meeting` <- as.Date(format(as.Date(timeseries_data$`Date of meeting`), "%Y-%m-01"))


# Gruppieren und Anzahl der Meetings pro Monat zählen
timeseries_data <- timeseries_data %>%
  group_by(`Date of meeting`) %>%
  summarise(`Number of Meetings` = n(), .groups = "drop")

# Fehlende Monate ergänzen und mit 0 füllen
timeseries_data <- timeseries_data %>%
  complete(`Date of meeting` = seq(as.Date("2020-06-01 00:00:00"), max(`Date of meeting`), by = "month"),
           fill = list(`Number of Meetings` = 0))

# Plot
timeseries_data %>%
  ggplot(aes(x = `Date of meeting`, y = `Number of Meetings`)) +
  geom_line(color = "#1f77b4", size = 1.1) +
  ylim(0, 30) +
  # Industriepapier
  # Kommission stellt Entwurf vor
  # Entwurf wird angenommen
  
  annotate(geom = "text", x = as.Date("2022-06-30"), y = 10, color = "#ff7f0e",
           label = "EU Kommission stellt\nChips Act vor") +
  
  annotate("segment", x = as.Date("2022-02-15"), xend = as.Date("2022-06-20"), y = 2.5, yend = 8, colour = "#ff7f0e") +
  
  annotate(geom = "point", x = as.Date("2022-02-01"), y = 2, size = 7, shape = 21, fill = "transparent", color = "#ff7f0e") +
  
  annotate(geom = "text", x = as.Date("2021-05-01"), y = 9, color = "#ff7f0e",
           label = "Aktualisiertes \nIndustriestrategiepapier") +
  
  annotate(geom = "point", x = as.Date("2021-05-01"), y = 5, size = 7, shape = 21, fill = "transparent", color = "#ff7f0e") +
  
  annotate(geom = "text", x = as.Date("2023-05-15"), y = 14, color = "#ff7f0e",
         label = "Verabschiedung des    \nChips Acts durch    \ndas EU-Parlament    ") +
  
  annotate(geom = "point", x = as.Date("2023-07-01"), y = 0, size = 7, shape = 21, fill = "transparent", color = "#ff7f0e") +
  
  annotate("segment", x = as.Date("2023-07-01"), xend = as.Date("2023-06-15"), y = 1, yend = 11, colour = "#ff7f0e") +
  scale_x_date(date_breaks = "3 months" , date_labels = "%m/%y", minor_breaks = NULL) +
  theme_light() 


ggsave(filename = "meetings timeline.svg", path = "./Graphics/", width = std_width, height = std_height)
write.xlsx(timeseries_data, file = "./tables/timeseries_data.xlsx")
```
